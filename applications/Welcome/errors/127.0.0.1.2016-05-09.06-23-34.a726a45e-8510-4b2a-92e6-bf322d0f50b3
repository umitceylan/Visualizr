(dp1
S'output'
p2
S'<type \'exceptions.SyntaxError\'> Field: invalid table name: 3b51aaf0_15e9_11e6_b79e_40167e77d53f, use rname for "funny" names'
p3
sS'layer'
p4
S'C:\\Users\\Kim Son\\Documents\\Visualizr\\applications\\Visualizr\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\nimport os\nimport uuid\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef upload_data():\n    form = SQLFORM(db.master_table, fields=[\'upload_data\'])\n    if form.process().accepted:\n        filter_table(form)\n        response.flash = \'Form Accepted\'\n        """session.upload_data = form.vars.upload_data"""\n    elif form.errors:\n        response.flash = \'Upload Form Error\'\n    return dict(form = form)\n\ndef filter_table(form):\n    if form.vars.upload_data is not None:\n        f = open("applications/Visualizr/static/" + form.vars.upload_data)\n    rows = f.readlines()\n    line = rows[0].strip()\n    columns = line.split(\',\')\n    uid = str(uuid.uuid1())\n    tablename = uid.replace(\'-\',\'_\')\n    db.define_table(tablename, *[Field(c) for c in columns])\n    master_entry = db(db.master_table.id == form.vars.id).select()\n    master_entry.table_id = tablename\n\nresponse._vars=response._caller(upload_data)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Kim Son\\Documents\\Visualizr\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Kim Son\\Documents\\Visualizr\\applications\\Visualizr\\controllers/default.py", line 85, in <module>\n  File "C:\\Users\\Kim Son\\Documents\\Visualizr\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Kim Son\\Documents\\Visualizr\\applications\\Visualizr\\controllers/default.py", line 66, in upload_data\n    filter_table(form)\n  File "C:\\Users\\Kim Son\\Documents\\Visualizr\\applications\\Visualizr\\controllers/default.py", line 81, in filter_table\n    db.define_table(tablename, *[Field(c) for c in columns])\n  File "C:\\Users\\Kim Son\\Documents\\Visualizr\\gluon\\packages\\dal\\pydal\\base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "C:\\Users\\Kim Son\\Documents\\Visualizr\\gluon\\packages\\dal\\pydal\\base.py", line 851, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "C:\\Users\\Kim Son\\Documents\\Visualizr\\gluon\\packages\\dal\\pydal\\objects.py", line 226, in __init__\n    \'use rname for "funny" names\' % tablename)\nSyntaxError: Field: invalid table name: 3b51aaf0_15e9_11e6_b79e_40167e77d53f, use rname for "funny" names\n'
p11
s.